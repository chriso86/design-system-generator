openapi: 3.0.0
# META DATA
servers:
- description: SwaggerHub API
  url: https://virtserver.swaggerhub.com/chriso86/GirderAPI/1.0.0
info:
  version: "1.0.0"
  title: GirderAPI for design documentation
  description: >-
    The design documentation utility for Girder design system
security:
- accessCode:
  - read
  - write


# API PATHS
paths:
  # GET ALL COLORS
  /colors/{projectId}:
    get:
      summary: Get all colors for a project
      description: >-
        This is used to fetch all existing colors for a project
      security: []
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: All colors returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Colors'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

    # CREATE A COLOR
    post:
      summary: Create a new color for a project
      description: >-
        This is used to create a new color which is attached to a
        specific project
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/Color'
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

    # UPDATE A COLOR
    put:
      summary: Update an existing color for a project
      description: >-
        This is used to update an existing color which is attached to a
        specific project
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/Color
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

  # GET ONE COLOR
  /colors/{colorId}:
    get:
      summary: Get a specific color for a project
      description: >-
        This is used to fetch all existing colors for a project
      security: []
      parameters:
      - name: colorId
        in: path
        description: Color ID
        required: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Color returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'


  # GET ALL FONTS
  /fonts/{projectId}:
    get:
      summary: Get all fonts for a project
      description: >-
        This is used to fetch all existing fonts for a project
      security: []
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: All font returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fonts'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

    # CREATE A FONT
    post:
      summary: Create a new font for a project
      description: >-
        This is used to create a new font which is attached to a
        specific project
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/Font'
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Font'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

    # UPDATE A FONT
    put:
      summary: Update an existing font for a project
      description: >-
        This is used to update an existing font which is attached to a
        specific project
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/Font
      parameters:
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Font'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

  # GET ONE FONT
  /fonts/{fontId}:
    get:
      summary: Get a specific font for a project
      description: >-
        This is used to fetch an existing font for a project
      security: []
      parameters:
      - name: fontId
        in: path
        description: Font ID
        required: true
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: Project ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Font downloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Font'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'

# COMPONENTS
components:
  # DATA MODELS
  schemas:
    #COLORS
    Color:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
      - id
        name

    Colors:
      type: array
      items:
        $ref: '#/components/schemas/Color'

    # FONTS
    Font:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
      - id
        name

    Fonts:
      type: array
      items:
        $ref: '#/components/schemas/Font'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message


  # RESPONSES
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Unauthorized - Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: An Unexpected Error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  # SECURITY
  securitySchemes:
    accessCode:
      type: oauth2
      flows:
        # BITBUCKET OAUTH
        authorizationCode:
          authorizationUrl: 'https://bitbucket.org/site/oauth2/authorize'
          tokenUrl: 'https://bitbucket.org/site/oauth2/access_token'
          scopes:
            account: Allow viewing user's basic account information
            team: Allow viewing user's team information
            issue: Allow issue tracking
            'issue:write': Allow issue creation